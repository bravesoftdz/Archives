unit Model_TripAdvisorNew;

interface

uses
   API_Parse
  ,API_Yandex;

type
  TTripAdvModel = class(TModelParse)
  // частные методы
  private
    FTranslater: TYaTranslater;
    procedure ParseCountries(aLinkId: Integer; aPage: string);
    procedure ParseCatLinks(aLinkId: Integer; aPage: string);
    procedure ParseRegions(aLinkId: Integer; aPage: string);
    procedure ParseObjectsList(aLinkId: Integer; aPage: string);

  // переопределяемые методы
  private
    procedure SetStartLinks(aLinkID: integer); override;
    procedure SetParseMethods(aLevel: Integer); override;
  protected
    procedure InitParserData; override;
    procedure DeinitParserData; override;
  end;

implementation

uses
  System.SysUtils
  ,API_Files;

procedure TTripAdvModel.ParseObjectsList(aLinkId: Integer; aPage: string);
var
  Rubric, Link, Site, Geo: string;
  level, i: integer;
  isProcessing: Boolean;
begin
  TFilesEngine.SaveTextToFile('1.html', aPage);
  Rubric:=FParser.GetValueByKey(aLinkId, 'Rubric', level);
  Site:=FParser.GetValueByKey(aLinkId, 'Site', level);
  Geo:=FParser.GetValueByKey(aLinkId, 'geo', level);
  i:=0;
  isProcessing:=True;

    if Rubric='Hotels' then
    begin


      // ссылка на список отелей
      inc(i);

      Link:=Site+'/Hotels?';
      Link:=Link + 'seen=0';
      Link:=Link + '&sequence=1';
      Link:=Link + '&geo=' + TParseTool.ParseByKey(Geo, 'g', '');
      Link:=Link + '&adults=2';
      Link:=Link + '&rooms=1';
      Link:=Link + '&searchAll=false';
      Link:=Link + '&requestingServlet=Hotels';
      Link:=Link + '&refineForm=true';
      Link:=Link + '&hs=';
      Link:=Link + '&o=a30';
      Link:=Link + '&pageSize=';
      Link:=Link + '&rad=0';
      Link:=Link + '&dateBumped=NONE';
      Link:=Link + '&displayedSortOrder=popularity';

      FParser.AddLink(5, Link, aLinkId, i, True);
    end;
end;

procedure TTripAdvModel.ParseRegions(aLinkId: Integer; aPage: string);
var
  Site, Rubric, Geo: string;
  level, i, Offset: integer;
  Rows: TArray<string>;
  Row, tx, Link: string;
begin
  Site:=FParser.GetValueByKey(aLinkId, 'Site', level);
  Rubric:=FParser.GetValueByKey(aLinkId, 'Rubric', level);
  Geo:=FParser.GetValueByKey(aLinkId, 'geo', level);
  tx:=FParser.GetLinkById(aLinkId);
  tx:=TParseTool.ParseByKey(tx, '-oa', '');
  Offset:=StrToIntDef(tx, 0);

  if Rubric='Hotels' then
    begin
      // ссылка на регион
      tx:=TParseTool.ParseByKey(aPage, 'id="BROAD_GRID', 'class="deckTools');

      Rows:=TParseTool.MultiParseByKey(aPage, '"geo_name">', '">');
      i:=0;
      for Row in Rows do
        begin
          Inc(i);

          tx:=TParseTool.ParseByKey(Row, '-', '-');
          Link:=Site+'/Hotels-'+tx;
          FParser.AddLink(4, Link, aLinkId, i);
          FParser.AddData(aLinkId, i, 'geo', tx);
        end;

      // след. страница списка регионов
      tx:='/Hotels-'+Geo+'-oa'+IntToStr(Offset+20);
       if Pos(tx, aPage)>0 then
        begin
          Inc(i);
          Link:=Site+tx;
          FParser.AddLink(3, Link, aLinkId, i);
        end;
    end;
end;

procedure TTripAdvModel.DeinitParserData;
begin
  FTranslater.Free;
end;

procedure TTripAdvModel.ParseCatLinks(aLinkId: Integer; aPage: string);
var
  Link: string;
  level: integer;
  Site: string;
begin
  Site:=FParser.GetValueByKey(aLinkId, 'Site', level);

  Link:=TParseTool.ParseByKey(aPage, 'HOTEL:{url:'+#39, #39);
  if Length(Link)>0 then
    begin
      Link:=Site+Link;
      FParser.AddLink(3, Link, aLinkId, 1);
      FParser.AddData(aLinkId, 1, 'Rubric', 'Hotels');
    end;

  Link:=TParseTool.ParseByKey(aPage, 'EATERY:{url:'+#39, #39);
  if Length(Link)>0 then
    begin
      Link:=Site+Link;
      FParser.AddLink(3, Link, aLinkId, 2);
      FParser.AddData(aLinkId, 2, 'Rubric', 'Restaurants');
    end;

  Link:=TParseTool.ParseByKey(aPage, 'ATTRACTION:{url:'+#39, #39);
  if Length(Link)>0 then
    begin
      Link:=Site+Link;
      FParser.AddLink(3, Link, aLinkId, 3);
      FParser.AddData(aLinkId, 3, 'Rubric', 'Attractions');
    end;
end;

procedure TTripAdvModel.ParseCountries(aLinkId: Integer; aPage: string);
var
  tx: string;
  Rows: TArray<string>;
  Row: string;
  Link: string;
  Site: string;
  i, level: integer;
begin
  Site:=FParser.GetValueByKey(aLinkId, 'Site', level);

  tx:=TParseTool.ParseByKey(aPage, 'class="world_destinations', '</div></DIV>');
  Rows:=TParseTool.MultiParseByKey(tx, 'href="', '<');

  i:=0;
  for Row in Rows do
    begin
      tx:=TParseTool.ParseByKey(Row, '-', '-');
      if length(tx)>3 then
        begin
          Inc(i);
          FParser.AddData(aLinkId, i, 'geo', tx);

          Link:=Site+TParseTool.ParseByKey(Row, '', '"');
          FParser.AddLink(2, Link, aLinkId, i);

          tx:=TParseTool.ParseByKey(Row, '>', '');
          FParser.AddData(aLinkId, i, 'ru_country', tx);

          tx:=FTranslater.Translate('uk', tx);
          FParser.AddData(aLinkId, i, 'ua_country', tx);

          tx:=TParseTool.ParseByKeyReverse(Row, '.html', '-', 1);
          tx:=StringReplace(tx, '_', ' ', [rfReplaceAll, rfIgnoreCase]);
          FParser.AddData(aLinkId, i, 'en_country', tx);
        end;
    end;
end;

procedure TTripAdvModel.SetParseMethods(aLevel: Integer);
begin
  if aLevel=1 then FParseMethod:=ParseCountries;
  if aLevel=2 then FParseMethod:=ParseCatLinks;
  if aLevel=3 then FParseMethod:=ParseRegions;
  if aLevel=4 then FParseMethod:=ParseObjectsList;
  if aLevel=5 then FParseMethod:=ParseObjectsList;
end;

procedure TTripAdvModel.SetStartLinks(aLinkID: integer);
begin
  FParser.AddLink(1, 'https://www.tripadvisor.ru/SiteIndex', aLinkId, 1);
  FParser.AddData(aLinkID, 1, 'Site', 'https://www.tripadvisor.ru');
end;

procedure TTripAdvModel.InitParserData;
begin
  FData.AddOrSetValue('ParserName', 'roman_tripadvisor');
  FData.AddOrSetValue('ZeroLink', 'https://www.tripadvisor.com/');

  FTranslater:=TYaTranslater.Create;
end;

end.

unit Model_TripAdvisorNew;

interface

uses
   API_Parse
  ,API_Yandex;

type
  TTripAdvModel = class(TModelParse)
  // частные методы
  private
    FTranslater: TYaTranslater;
    function CalcRedirectedURL(d: string): string;
    function GetOffset(a: integer): integer;
    procedure ParseCountries(aLinkId: Integer; aPage: string);
    procedure ParseCatLinks(aLinkId: Integer; aPage: string);
    procedure ParseRegions(aLinkId: Integer; aPage: string);
    procedure ParseObjectsList(aLinkId: Integer; aPage: string);
    procedure ParseObject(aLinkId: Integer; aPage: string);

  // переопределяемые методы
  private
    procedure SetStartLinks(aLinkID: integer); override;
    procedure SetParseMethods(aLevel: Integer); override;
  protected
    procedure InitParserData; override;
    procedure DeinitParserData; override;
  end;

implementation

uses
  System.SysUtils
  ,API_Files;

function TTripAdvModel.GetOffset(a: integer): integer;
begin
  Result:=-1;
  if (a >= 97) and (a <= 122) then Exit(a-61);
  if (a >= 65) and (a <= 90) then Exit(a-55);
  if (a >= 48) and (a <= 71) then Exit(a-48);
end;

function TTripAdvModel.CalcRedirectedURL(d: string): string;
var
  zz, q, x, z: TArray<string>;
  g: TArray<TArray<string>>;
  b, e: string;
  a, i: integer;
  f: Integer;
  h: string;
  CurrArray: TArray<string>;
begin
  zz := ['&', '=', 'p', '6', '?', 'H', '%', 'B', '.com', 'k', '9', '.html', 'n', 'M', 'r', 'www.', 'h', 'b', 't', 'a', '0', '/', 'd', 'O', 'j', 'http://', '_', 'L', 'i', 'f', '1', 'e', '-', '2', '.', 'N', 'm', 'A', 'l', '4', 'R', 'C', 'y', 'S', 'o', '+', '7', 'I', '3', 'c', '5', 'u', '0', 'T', 'v', 's', 'w', '8', 'P', '0', 'g', '0'];
  q := ['0', '__3F__', '0', 'Photos', '0', 'https://', '.edu', '*', 'Y', '>', '0', '0', '0', '0', '0', '0', '`', '__2D__', 'X', '<', 'slot', '0', 'ShowUrl', 'Owners', '0', '[', 'q', '0', 'MemberProfile', '0', 'ShowUserReviews', #39, 'Hotel', '0', '0', 'Expedia', 'Vacation', 'Discount', '0', 'UserReview', 'Thumbnail', '0', '__2F__', 'Inspiration', 'V', 'Map', ':', '@', '0', 'F', 'help', '0', '0', 'Rental', '0', 'Picture', '0', '0', '0', 'hotels', '0', 'ftp:'];
  x := ['0', '0', 'J', '0', '0', 'Z', '0', '0', '0', ';', '0', 'Text', '0', '(', 'x', 'GenericAds', 'U', '0', 'careers', '0', '0', '0', 'D', '0', 'members', 'Search', '0', '0', '0', 'Post', '0', '0', '0', 'Q', '0', '$', '0', 'K', '0', 'W', '0', 'Reviews', '0', ',', '__2E__', '0', '0', '0', '0', '0', '0', '0', '{', '}', '0', 'Cheap', ')', '0', '0', '0', '#', '.org'];
  z := ['0', 'Hotels', '0', '0', 'Icon', '0', '0', '0', '0', '.net', '0', '0', 'z', '0', '0', 'pages', '0', 'geo', '0', '0', '0', 'cnt', '~', '0', '0', ']', '|', '0', 'tripadvisor', 'Images', 'BookingBuddy', '0', 'Commerce', '0', '0', 'partnerKey', '0', 'area', '0', 'Deals', 'from', '\\', '0', 'urlKey', '0', #39, '0', 'WeatherUnderground', '0', 'MemberSign', 'Maps', '0', 'matchID', 'Packages', 'E', 'Amenities', 'Travel', '.htm', '0', '!', '^', 'G'];
  g := [zz, q, x, z];

  b:='';
  a:=0;
  for i := 0 to Length(d)-1 do
    begin
      inc(a);
      h := d[a];
      e := h;

      CurrArray:=[];
      if h='q' then CurrArray:=q;
      if h='x' then CurrArray:=x;
      if h='z' then CurrArray:=z;
      if h='' then CurrArray:=zz;

      if (Length(CurrArray)>0) and (a < Length(d)) then
        begin
            Inc(a);
            e := e + d[a];
        end
      else CurrArray:=zz;

      f := getOffset(Ord(d[a]));
      if (f < 0) {or (StrToIntDef(CurrArray[f], -1) <> -1)} then
        b := b + e
      else b := b + CurrArray[f];
    end;
  b:=TParseTool.ParseByKey(b,'',#0);
  Result:=b;
end;

procedure TTripAdvModel.ParseObject(aLinkId: Integer; aPage: string);
var
  tx, url, purl, subtx: string;
  AltName: string;
  phone: string;
  ObjId: string;
  email: string;
  level: Integer;
  address: string;
  ContRows, ARows: TArray<string>;
  ContRow, Row, Content: string;
  i, j: Integer;
begin
  ObjId:=FParser.GetValueByKey(aLinkId, 'ID', level);

  // name
  tx:=TParseTool.ParseByKey(aPage, '<h1 id="HEADING"', '</h1>');
  tx:=TParseTool.ParseByKey(tx, '</div>', '');
  if Pos('>',tx)>0 then
    begin
      AltName:=Trim(TParseTool.ParseByKey(tx,'>','<'));
      FParser.AddData(aLinkId, 1, 'ObjectAltName', AltName);

      tx:=Trim(TParseTool.ParseByKey(tx,'','<'));
    end;
  if tx<>'' then
    FParser.AddData(aLinkId, 1, 'ObjectName', tx)
  else Exit;

  // url
  if Pos('ui_icon laptop fl icnLink', aPage)>0 then     // отели
    begin
      purl:=TParseTool.ParseByKey(aPage, 'URL_HOTEL|text|', '|');
      purl:=(StrToIntDef(purl,1)-1).ToString;
      url:=Format('https://www.tripadvisor.ru/ShowUrl?&excludeFromVS=false&odc=BusinessListingsUrl&d=%s&url=%s', [ObjId, purl]);
      tx:=FParser.GetRedirectedUrl(url);
      FParser.AddData(aLinkId, 1, 'site_url', tx);
    end;
  if FParser.GetValueByKey(aLinkId, 'Rubric', level)='Restaurants' then  // рестораны
    begin
      tx:=TParseTool.ParseByKey(aPage, #39+'aHref'+#39+':'+#39, #39);
      purl:=CalcRedirectedURL(tx);
      if purl<>'' then
        begin
          url:='https://www.tripadvisor.ru'+purl;
          tx:=FParser.GetRedirectedUrl(url);
          tx:=StringReplace(tx, '#_=_', '', [rfReplaceAll, rfIgnoreCase]);
          FParser.AddData(aLinkId, 1, 'site_url', tx);
        end;
    end;

  // phone
  if Pos('ui_icon phone fl icnLink', aPage)>0 then
    begin
      tx:=TParseTool.ParseByKey(aPage, 'ui_icon phone fl icnLink', 'document');
      phone:=TParseTool.ParseByKey(tx, 'a='+#39, #39);
      phone:=phone+Trim(TParseTool.ParseByKey(tx, 'a+='+#39, #39));
      phone:=phone+Trim(TParseTool.ParseByKey(tx, 'c='+#39, #39));
      phone:=phone+Trim(TParseTool.ParseByKey(tx, 'c+='+#39, #39));
      phone:=phone+Trim(TParseTool.ParseByKey(tx, 'b='+#39, #39));
      phone:=phone+Trim(TParseTool.ParseByKey(tx, 'b+='+#39, #39));
      FParser.AddData(aLinkId, 1, 'phone', phone);
    end;

  // email
  if Pos('ui_icon email fl icnLink', aPage)>0 then
    begin
      tx:=TParseTool.ParseByKey(aPage, 'EMAIL|text|', '|');
      url:=Format('https://www.tripadvisor.ru/EmailHotel?detail=%s&isOfferEmail=false&overrideOfferEmail=&contactColumn=%s', [ObjId, tx]);
      tx:=FParser.GetHTMLByURL(url);
      email:=TParseTool.ParseByKey(tx, 'name="receiver" value="', '"');
      FParser.AddData(aLinkId, 1, 'email', email);
    end;
  if FParser.GetValueByKey(aLinkId, 'Rubric', level)='Restaurants' then  // рестораны
    begin
      email:=TParseTool.ParseByKey(aPage, 'checkEmailAction'+#39+',event,this,'+#39, #39);
      if Length(email)>0 then FParser.AddData(aLinkId, 1, 'email', email);
    end;

  // город
  tx:=Trim(TParseTool.ParseByKey(aPage, '<span class="geoName"', '<'));
  delete(tx,1,pos('>',tx));
  if tx<>'' then FParser.AddData(aLinkId, 1, 'City', tx);

  // адрес
  address:=TParseTool.ParseByKey(aPage, 'property="streetAddress">', '<');
  tx:=TParseTool.ParseByKey(aPage, '<span class="extended-address">', '<');
  if tx<>'' then address:=tx+', '+address;
  tx:=FParser.GetValueByKey(aLinkId, 'City', level);
  if tx<>'' then
    begin
      if address<>'' then  address:=address+', ';
      address:=address+tx;
    end;
  tx:=TParseTool.ParseByKey(aPage, 'property="postalCode">', '<');
  if tx<>'' then address:=address+' '+tx;
  address:=address+', '+FParser.GetValueByKey(aLinkId, 'Country', level)+' ';
  FParser.AddData(aLinkId, 1, 'Address', address);

  // услуги
  if FParser.GetValueByKey(aLinkId, 'Rubric', level)='Restaurants' then
    begin
      tx:=TParseTool.ParseByKey(aPage, '<div class="additional_info">', '</div>'+#$A+'</div>');
      Content:=Trim(TParseTool.ParseByKey(tx, '<div class="title">', '<'));
      ARows := TParseTool.MultiParseByKey(tx, '<li>', '</li>');
      i:=0;
      for Row in ARows do
        begin
          Inc(i);
          subtx := Trim(TParseTool.RemoveTags(Row));
          subtx := StringReplace(subtx, #$A, ' ', [rfReplaceAll, rfIgnoreCase]);
          subtx := StringReplace(subtx, '&nbsp;&gt;&nbsp;', '>', [rfReplaceAll, rfIgnoreCase]);
          Content := Content + #$A + subtx;
        end;
      if (Pos('Номер телефона:', tx)>0) or (Pos('Phone Number:', tx)>0) then
        begin
          phone:=TParseTool.ParseByKey(tx, 'Номер телефона:'+#$A+'<span>', '<');
          if Phone.IsEmpty then phone:=TParseTool.ParseByKey(tx, 'Phone Number:'+#$A+'<span>', '<');
          FParser.AddData(aLinkId, 1, 'phone', phone);
        end;

      tx:=TParseTool.ParseByKey(aPage, 'data-tab="TABS_DETAILS"', '</div> </div> </div>');
      Delete(tx,1,Pos('>',tx));

      ContRows:=TParseTool.MultiParseByKey(tx, '<div class="row">', '</div>'+#$A+'</div>');
      j:=0;
      for ContRow in ContRows do
        begin
          tx:=TParseTool.ParseByKey(ContRow, 'title">', '<');
          if Length(tx)>0 then
            begin
              inc(j);
              Content := Content + #$A + tx + ':';

              ARows := TParseTool.MultiParseByKey(ContRow, '<div', '</div>');
              i:=0;
              for Row in ARows do
                begin
                  Inc(i);
                  if i>1 then
                    begin
                      subtx:=Row;
                      Delete(subtx, 1, Pos('>', subtx));
                      subtx := Trim(TParseTool.RemoveTags(subtx));
                      subtx := StringReplace(subtx, #$A, ' ', [rfReplaceAll, rfIgnoreCase]);  // удаляем переносы
                      subtx := ' ' + subtx;
                      if i>2 then subtx := ',' + subtx;
                      Content := Content + subtx;
                    end;
                end;
            end;
        end;
    end
  else
    begin
      tx:=TParseTool.ParseByKey(aPage, 'id="AMENITIES_TAB"', '</div> </div> </div>');
      Delete(tx,1,Pos('>',tx));
      subtx:=TParseTool.ParseByKey(tx,'additional_info reservation_info">','</dl>');
      tx:=StringReplace(tx, subtx, '', [rfReplaceAll, rfIgnoreCase]);
      Content:='';

        ContRows:=TParseTool.MultiParseByKey(tx, 'amenity_hdr', '</div>'+#$A+'</div>');
        for ContRow in ContRows do
          begin
            Content := Content + TParseTool.ParseByKey(ContRow, '>', '<') + ':';
            ARows := TParseTool.MultiParseByKey(ContRow, '<li>', '</li>');
            i:=0;
            for Row in ARows do
              begin
                Inc(i);
                subtx := Trim(TParseTool.RemoveTags(Row));
                subtx := ' ' + subtx;
                if i>1 then subtx := ',' + subtx;
                Content := Content + subtx;
              end;
            Content := Content + #$A;
          end;
        subtx := TParseTool.ParseByKey(tx, 'additional_info_amenities">', '');
        subtx := StringReplace(subtx, '</h3>', 'endstr', [rfReplaceAll, rfIgnoreCase]);  // метка переноса
        subtx := StringReplace(subtx, '</div>', 'endstr', [rfReplaceAll, rfIgnoreCase]); // метка переноса
        subtx := StringReplace(subtx, '</address>', 'endstr', [rfReplaceAll, rfIgnoreCase]); // метка переноса
        subtx := Trim(TParseTool.RemoveTags(subtx));

        subtx := StringReplace(subtx, #$A, ' ', [rfReplaceAll, rfIgnoreCase]);           // удаляем переносы
        subtx := StringReplace(subtx, '&#62;', '>', [rfReplaceAll, rfIgnoreCase]);       // символ >
        subtx := StringReplace(subtx, #$20BD, '&#8381;', [rfReplaceAll, rfIgnoreCase]);  // символ рубля
        subtx := StringReplace(subtx, 'endstr', #$A, [rfReplaceAll, rfIgnoreCase]);      // восстанавливаем переносы
        subtx := StringReplace(subtx, #$A+' ', #$A, [rfReplaceAll, rfIgnoreCase]);       // восстанавливаем переносы
        subtx := StringReplace(subtx, ' '+#$A, #$A, [rfReplaceAll, rfIgnoreCase]);       // восстанавливаем переносы
        while Pos(#$A+#$A, subtx)>0 do subtx:=StringReplace(subtx,#$A+#$A,#$A,[rfReplaceAll, rfIgnoreCase]); // восстанавливаем переносы
        Content := Content + Trim(subtx);
    end;
  FParser.AddData(aLinkId, 1, 'Amenities', Content);
end;

procedure TTripAdvModel.ParseObjectsList(aLinkId: Integer; aPage: string);
var
  Rubric, Link, Site, Geo: string;
  level, i: integer;
  Rows: TArray<string>;
  Row: String;
  ID: String;
begin
  //TFilesEngine.SaveTextToFile('1.html', aPage);
  Rubric:=FParser.GetValueByKey(aLinkId, 'Rubric', level);
  Site:=FParser.GetValueByKey(aLinkId, 'Site', level);
  Geo:=FParser.GetValueByKey(aLinkId, 'geo', level);
  i:=0;

    if Rubric='Hotels' then
    begin
      // ссылка на отель
      Rows:=TParseTool.MultiParseByKey(aPage, 'class="listing_info', 'onclick=');
      for Row in Rows do
        begin
          if Pos('РЕКЛАМА', Row) = 0 then
            begin
              Inc(i);
              Link:=Site+TParseTool.ParseByKey(Row, 'href="', '"');
              FParser.AddLink(6, Link, aLinkId, i);

              ID:=TParseTool.ParseByKey(Link, '-d', '-');
              FParser.AddData(aLinkId, i, 'ID', ID);
            end;
        end;

      // ссылка на следующий список
      if Pos('<link rel="next"', aPage)>0 then
        begin
          Link:=TParseTool.ParseByKey(aPage, '<link rel="next"', '.');
          Link:=Site+TParseTool.CutBetween(Link, 'h', '"');
          FParser.AddLink(5, Link, aLinkId, 1);
        end;
    end;
end;

procedure TTripAdvModel.ParseRegions(aLinkId: Integer; aPage: string);
var
  Site, Rubric, Geo: string;
  level, i, Offset: integer;
  Rows: TArray<string>;
  Row, tx, Link: string;
begin
  Site:=FParser.GetValueByKey(aLinkId, 'Site', level);
  Rubric:=FParser.GetValueByKey(aLinkId, 'Rubric', level);
  Geo:=FParser.GetValueByKey(aLinkId, 'geo', level);
  tx:=FParser.GetLinkById(aLinkId);
  tx:=TParseTool.ParseByKey(tx, '-oa', '');
  Offset:=StrToIntDef(tx, 0);

  if Rubric='Hotels' then
    begin
      // ссылка на регион
      tx:=TParseTool.ParseByKey(aPage, 'id="BROAD_GRID', 'class="deckTools');

      Rows:=TParseTool.MultiParseByKey(aPage, '"geo_name">', '">');
      i:=0;
      for Row in Rows do
        begin
          Inc(i);

          tx:=TParseTool.ParseByKey(Row, '-', '-');
          Link:=Site+'/Hotels-'+tx;
          FParser.AddLink(4, Link, aLinkId, i);
          FParser.AddData(aLinkId, i, 'geo', tx);
        end;

      // след. страница списка регионов
      tx:='/Hotels-'+Geo+'-oa'+IntToStr(Offset+20);
       if Pos(tx, aPage)>0 then
        begin
          Inc(i);
          Link:=Site+tx;
          FParser.AddLink(3, Link, aLinkId, i);
        end;
    end;
end;

procedure TTripAdvModel.DeinitParserData;
begin
  FTranslater.Free;
end;

procedure TTripAdvModel.ParseCatLinks(aLinkId: Integer; aPage: string);
var
  Link: string;
  level: integer;
  Site: string;
begin
  Site:=FParser.GetValueByKey(aLinkId, 'Site', level);

  Link:=TParseTool.ParseByKey(aPage, 'HOTEL:{url:'+#39, #39);
  if Length(Link)>0 then
    begin
      Link:=Site+Link;
      FParser.AddLink(3, Link, aLinkId, 1);
      FParser.AddData(aLinkId, 1, 'Rubric', 'Hotels');
    end;

  Link:=TParseTool.ParseByKey(aPage, 'EATERY:{url:'+#39, #39);
  if Length(Link)>0 then
    begin
      Link:=Site+Link;
      FParser.AddLink(3, Link, aLinkId, 2);
      FParser.AddData(aLinkId, 2, 'Rubric', 'Restaurants');
    end;

  Link:=TParseTool.ParseByKey(aPage, 'ATTRACTION:{url:'+#39, #39);
  if Length(Link)>0 then
    begin
      Link:=Site+Link;
      FParser.AddLink(3, Link, aLinkId, 3);
      FParser.AddData(aLinkId, 3, 'Rubric', 'Attractions');
    end;
end;

procedure TTripAdvModel.ParseCountries(aLinkId: Integer; aPage: string);
var
  tx: string;
  Rows: TArray<string>;
  Row: string;
  Link: string;
  Site: string;
  i, level: integer;
begin
  Site:=FParser.GetValueByKey(aLinkId, 'Site', level);

  tx:=TParseTool.ParseByKey(aPage, 'class="world_destinations', '</div></DIV>');
  Rows:=TParseTool.MultiParseByKey(tx, 'href="', '<');

  i:=0;
  for Row in Rows do
    begin
      tx:=TParseTool.ParseByKey(Row, '-', '-');
      if length(tx)>3 then
        begin
          Inc(i);
          FParser.AddData(aLinkId, i, 'geo', tx);

          Link:=Site+TParseTool.ParseByKey(Row, '', '"');
          FParser.AddLink(2, Link, aLinkId, i);

          tx:=TParseTool.ParseByKey(Row, '>', '');
          FParser.AddData(aLinkId, i, 'ru_country', tx);

          tx:=FTranslater.Translate('uk', tx);
          FParser.AddData(aLinkId, i, 'ua_country', tx);

          tx:=TParseTool.ParseByKeyReverse(Row, '.html', '-', 1);
          tx:=StringReplace(tx, '_', ' ', [rfReplaceAll, rfIgnoreCase]);
          FParser.AddData(aLinkId, i, 'en_country', tx);
        end;
    end;
end;

procedure TTripAdvModel.SetParseMethods(aLevel: Integer);
begin
  if aLevel=1 then FParseMethod:=ParseCountries;
  if aLevel=2 then FParseMethod:=ParseCatLinks;
  if aLevel=3 then FParseMethod:=ParseRegions;
  if aLevel=4 then FParseMethod:=ParseObjectsList;
  if aLevel=5 then FParseMethod:=ParseObjectsList;
  if aLevel=6 then FParseMethod:=ParseObject;
end;

procedure TTripAdvModel.SetStartLinks(aLinkID: integer);
begin
  FParser.AddLink(1, 'https://www.tripadvisor.ru/SiteIndex', aLinkId, 1);
  FParser.AddData(aLinkID, 1, 'Site', 'https://www.tripadvisor.ru');
end;

procedure TTripAdvModel.InitParserData;
begin
  FData.AddOrSetValue('ParserName', 'roman_tripadvisor');
  FData.AddOrSetValue('ZeroLink', 'https://www.tripadvisor.com/');

  FTranslater:=TYaTranslater.Create;
end;

end.
